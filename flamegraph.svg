<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="92906620"><g><title>perf-exec (12,787 samples, 0.01%)</title><rect x="0.0000%" y="757" width="0.0138%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12,787 samples, 0.01%)</title><rect x="0.0000%" y="741" width="0.0138%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="751.50"></text></g><g><title>do_syscall_64 (12,787 samples, 0.01%)</title><rect x="0.0000%" y="725" width="0.0138%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="735.50"></text></g><g><title>__x64_sys_execve (12,787 samples, 0.01%)</title><rect x="0.0000%" y="709" width="0.0138%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="719.50"></text></g><g><title>do_execveat_common.isra.0 (12,787 samples, 0.01%)</title><rect x="0.0000%" y="693" width="0.0138%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="703.50"></text></g><g><title>bprm_execve (12,787 samples, 0.01%)</title><rect x="0.0000%" y="677" width="0.0138%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="687.50"></text></g><g><title>load_elf_binary (12,787 samples, 0.01%)</title><rect x="0.0000%" y="661" width="0.0138%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="671.50"></text></g><g><title>begin_new_exec (12,787 samples, 0.01%)</title><rect x="0.0000%" y="645" width="0.0138%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="655.50"></text></g><g><title>perf_event_exec (12,787 samples, 0.01%)</title><rect x="0.0000%" y="629" width="0.0138%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="639.50"></text></g><g><title>ctx_resched (12,787 samples, 0.01%)</title><rect x="0.0000%" y="613" width="0.0138%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="623.50"></text></g><g><title>__intel_pmu_enable_all.isra.0 (12,787 samples, 0.01%)</title><rect x="0.0000%" y="597" width="0.0138%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="607.50"></text></g><g><title>native_write_msr (12,787 samples, 0.01%)</title><rect x="0.0000%" y="581" width="0.0138%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="12787"/><text x="0.2500%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="741" width="7.8570%" height="15" fill="rgb(216,20,37)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="751.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="725" width="7.8570%" height="15" fill="rgb(206,188,39)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="735.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="709" width="7.8570%" height="15" fill="rgb(217,207,13)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="719.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="693" width="7.8570%" height="15" fill="rgb(231,73,38)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="703.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="677" width="7.8570%" height="15" fill="rgb(225,20,46)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="687.50">[ld-linux-x..</text></g><g><title>_dl_catch_exception (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="661" width="7.8570%" height="15" fill="rgb(210,31,41)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="671.50">_dl_catch_e..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="645" width="7.8570%" height="15" fill="rgb(221,200,47)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="655.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="629" width="7.8570%" height="15" fill="rgb(226,26,5)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="639.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="613" width="7.8570%" height="15" fill="rgb(249,33,26)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="623.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="597" width="7.8570%" height="15" fill="rgb(235,183,28)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="607.50">[ld-linux-x..</text></g><g><title>[ld-linux-x86-64.so.2] (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="581" width="7.8570%" height="15" fill="rgb(221,5,38)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="591.50">[ld-linux-x..</text></g><g><title>asm_exc_page_fault (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="565" width="7.8570%" height="15" fill="rgb(247,18,42)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="575.50">asm_exc_pag..</text></g><g><title>exc_page_fault (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="549" width="7.8570%" height="15" fill="rgb(241,131,45)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="559.50">exc_page_fa..</text></g><g><title>do_user_addr_fault (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="533" width="7.8570%" height="15" fill="rgb(249,31,29)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="543.50">do_user_add..</text></g><g><title>handle_mm_fault (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="517" width="7.8570%" height="15" fill="rgb(225,111,53)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="527.50">handle_mm_f..</text></g><g><title>__handle_mm_fault (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="501" width="7.8570%" height="15" fill="rgb(238,160,17)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="511.50">__handle_mm..</text></g><g><title>do_fault (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="485" width="7.8570%" height="15" fill="rgb(214,148,48)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="495.50">do_fault</text></g><g><title>filemap_map_pages (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="469" width="7.8570%" height="15" fill="rgb(232,36,49)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="479.50">filemap_map..</text></g><g><title>next_uptodate_folio (7,299,657 samples, 7.86%)</title><rect x="0.0138%" y="453" width="7.8570%" height="15" fill="rgb(209,103,24)" fg:x="12787" fg:w="7299657"/><text x="0.2638%" y="463.50">next_uptoda..</text></g><g><title>&lt;std::os::fd::owned::OwnedFd as std::os::fd::raw::AsRawFd&gt;::as_raw_fd (1,027,174 samples, 1.11%)</title><rect x="7.8707%" y="357" width="1.1056%" height="15" fill="rgb(229,88,8)" fg:x="7312444" fg:w="1027174"/><text x="8.1207%" y="367.50"></text></g><g><title>hrtimer_active (36,102 samples, 0.04%)</title><rect x="8.9763%" y="261" width="0.0389%" height="15" fill="rgb(213,181,19)" fg:x="8339618" fg:w="36102"/><text x="9.2263%" y="271.50"></text></g><g><title>dequeue_task_fair (9,134,565 samples, 9.83%)</title><rect x="9.0152%" y="229" width="9.8320%" height="15" fill="rgb(254,191,54)" fg:x="8375720" fg:w="9134565"/><text x="9.2652%" y="239.50">dequeue_task_f..</text></g><g><title>dequeue_entities (8,629,463 samples, 9.29%)</title><rect x="9.5589%" y="213" width="9.2883%" height="15" fill="rgb(241,83,37)" fg:x="8880822" fg:w="8629463"/><text x="9.8089%" y="223.50">dequeue_entit..</text></g><g><title>dequeue_entity (8,629,463 samples, 9.29%)</title><rect x="9.5589%" y="197" width="9.2883%" height="15" fill="rgb(233,36,39)" fg:x="8880822" fg:w="8629463"/><text x="9.8089%" y="207.50">dequeue_entity</text></g><g><title>vruntime_eligible (8,629,463 samples, 9.29%)</title><rect x="9.5589%" y="181" width="9.2883%" height="15" fill="rgb(226,3,54)" fg:x="8880822" fg:w="8629463"/><text x="9.8089%" y="191.50">vruntime_elig..</text></g><g><title>__perf_event_task_sched_in (7,343,567 samples, 7.90%)</title><rect x="18.9010%" y="213" width="7.9042%" height="15" fill="rgb(245,192,40)" fg:x="17560317" fg:w="7343567"/><text x="19.1510%" y="223.50">__perf_even..</text></g><g><title>perf_ctx_enable (7,343,567 samples, 7.90%)</title><rect x="18.9010%" y="197" width="7.9042%" height="15" fill="rgb(238,167,29)" fg:x="17560317" fg:w="7343567"/><text x="19.1510%" y="207.50">perf_ctx_en..</text></g><g><title>__intel_pmu_enable_all.isra.0 (7,343,567 samples, 7.90%)</title><rect x="18.9010%" y="181" width="7.9042%" height="15" fill="rgb(232,182,51)" fg:x="17560317" fg:w="7343567"/><text x="19.1510%" y="191.50">__intel_pmu..</text></g><g><title>native_write_msr (7,343,567 samples, 7.90%)</title><rect x="18.9010%" y="165" width="7.9042%" height="15" fill="rgb(231,60,39)" fg:x="17560317" fg:w="7343567"/><text x="19.1510%" y="175.50">native_writ..</text></g><g><title>schedule_hrtimeout_range_clock (17,069,368 samples, 18.37%)</title><rect x="8.9763%" y="277" width="18.3726%" height="15" fill="rgb(208,69,12)" fg:x="8339618" fg:w="17069368"/><text x="9.2263%" y="287.50">schedule_hrtimeout_range_clock</text></g><g><title>schedule (17,033,266 samples, 18.33%)</title><rect x="9.0152%" y="261" width="18.3337%" height="15" fill="rgb(235,93,37)" fg:x="8375720" fg:w="17033266"/><text x="9.2652%" y="271.50">schedule</text></g><g><title>__schedule (17,033,266 samples, 18.33%)</title><rect x="9.0152%" y="245" width="18.3337%" height="15" fill="rgb(213,116,39)" fg:x="8375720" fg:w="17033266"/><text x="9.2652%" y="255.50">__schedule</text></g><g><title>finish_task_switch.isra.0 (7,898,701 samples, 8.50%)</title><rect x="18.8472%" y="229" width="8.5018%" height="15" fill="rgb(222,207,29)" fg:x="17510285" fg:w="7898701"/><text x="19.0972%" y="239.50">finish_task_..</text></g><g><title>asm_common_interrupt (505,102 samples, 0.54%)</title><rect x="26.8053%" y="213" width="0.5437%" height="15" fill="rgb(206,96,30)" fg:x="24903884" fg:w="505102"/><text x="27.0553%" y="223.50"></text></g><g><title>common_interrupt (505,102 samples, 0.54%)</title><rect x="26.8053%" y="197" width="0.5437%" height="15" fill="rgb(218,138,4)" fg:x="24903884" fg:w="505102"/><text x="27.0553%" y="207.50"></text></g><g><title>__common_interrupt (505,102 samples, 0.54%)</title><rect x="26.8053%" y="181" width="0.5437%" height="15" fill="rgb(250,191,14)" fg:x="24903884" fg:w="505102"/><text x="27.0553%" y="191.50"></text></g><g><title>handle_fasteoi_irq (505,102 samples, 0.54%)</title><rect x="26.8053%" y="165" width="0.5437%" height="15" fill="rgb(239,60,40)" fg:x="24903884" fg:w="505102"/><text x="27.0553%" y="175.50"></text></g><g><title>handle_irq_event (505,102 samples, 0.54%)</title><rect x="26.8053%" y="149" width="0.5437%" height="15" fill="rgb(206,27,48)" fg:x="24903884" fg:w="505102"/><text x="27.0553%" y="159.50"></text></g><g><title>__handle_irq_event_percpu (505,102 samples, 0.54%)</title><rect x="26.8053%" y="133" width="0.5437%" height="15" fill="rgb(225,35,8)" fg:x="24903884" fg:w="505102"/><text x="27.0553%" y="143.50"></text></g><g><title>idma64_irq (505,102 samples, 0.54%)</title><rect x="26.8053%" y="117" width="0.5437%" height="15" fill="rgb(250,213,24)" fg:x="24903884" fg:w="505102"/><text x="27.0553%" y="127.50"></text></g><g><title>__x64_sys_epoll_wait (18,270,613 samples, 19.67%)</title><rect x="8.9763%" y="309" width="19.6656%" height="15" fill="rgb(247,123,22)" fg:x="8339618" fg:w="18270613"/><text x="9.2263%" y="319.50">__x64_sys_epoll_wait</text></g><g><title>do_epoll_wait (18,270,613 samples, 19.67%)</title><rect x="8.9763%" y="293" width="19.6656%" height="15" fill="rgb(231,138,38)" fg:x="8339618" fg:w="18270613"/><text x="9.2263%" y="303.50">do_epoll_wait</text></g><g><title>select_estimate_accuracy (1,201,245 samples, 1.29%)</title><rect x="27.3490%" y="277" width="1.2930%" height="15" fill="rgb(231,145,46)" fg:x="25408986" fg:w="1201245"/><text x="27.5990%" y="287.50"></text></g><g><title>set_normalized_timespec64 (1,201,245 samples, 1.29%)</title><rect x="27.3490%" y="261" width="1.2930%" height="15" fill="rgb(251,118,11)" fg:x="25408986" fg:w="1201245"/><text x="27.5990%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (18,694,867 samples, 20.12%)</title><rect x="8.9763%" y="341" width="20.1222%" height="15" fill="rgb(217,147,25)" fg:x="8339618" fg:w="18694867"/><text x="9.2263%" y="351.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (18,694,867 samples, 20.12%)</title><rect x="8.9763%" y="325" width="20.1222%" height="15" fill="rgb(247,81,37)" fg:x="8339618" fg:w="18694867"/><text x="9.2263%" y="335.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (424,254 samples, 0.46%)</title><rect x="28.6419%" y="309" width="0.4566%" height="15" fill="rgb(209,12,38)" fg:x="26610231" fg:w="424254"/><text x="28.8919%" y="319.50"></text></g><g><title>switch_fpu_return (424,254 samples, 0.46%)</title><rect x="28.6419%" y="293" width="0.4566%" height="15" fill="rgb(227,1,9)" fg:x="26610231" fg:w="424254"/><text x="28.8919%" y="303.50"></text></g><g><title>restore_fpregs_from_fpstate (424,254 samples, 0.46%)</title><rect x="28.6419%" y="277" width="0.4566%" height="15" fill="rgb(248,47,43)" fg:x="26610231" fg:w="424254"/><text x="28.8919%" y="287.50"></text></g><g><title>&lt;crossterm::event::source::unix::mio::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (20,029,381 samples, 21.56%)</title><rect x="7.8707%" y="389" width="21.5586%" height="15" fill="rgb(221,10,30)" fg:x="7312444" fg:w="20029381"/><text x="8.1207%" y="399.50">&lt;crossterm::event::source::unix::m..</text></g><g><title>mio::sys::unix::selector::Selector::select (20,029,381 samples, 21.56%)</title><rect x="7.8707%" y="373" width="21.5586%" height="15" fill="rgb(210,229,1)" fg:x="7312444" fg:w="20029381"/><text x="8.1207%" y="383.50">mio::sys::unix::selector::Selector..</text></g><g><title>epoll_wait (19,002,207 samples, 20.45%)</title><rect x="8.9763%" y="357" width="20.4530%" height="15" fill="rgb(222,148,37)" fg:x="8339618" fg:w="19002207"/><text x="9.2263%" y="367.50">epoll_wait</text></g><g><title>syscall_return_via_sysret (307,340 samples, 0.33%)</title><rect x="29.0986%" y="341" width="0.3308%" height="15" fill="rgb(234,67,33)" fg:x="27034485" fg:w="307340"/><text x="29.3486%" y="351.50"></text></g><g><title>rnbook::state::State::handle_event (34,518,415 samples, 37.15%)</title><rect x="7.8707%" y="453" width="37.1539%" height="15" fill="rgb(247,98,35)" fg:x="7312444" fg:w="34518415"/><text x="8.1207%" y="463.50">rnbook::state::State::handle_event</text></g><g><title>crossterm::event::poll (34,518,415 samples, 37.15%)</title><rect x="7.8707%" y="437" width="37.1539%" height="15" fill="rgb(247,138,52)" fg:x="7312444" fg:w="34518415"/><text x="8.1207%" y="447.50">crossterm::event::poll</text></g><g><title>crossterm::event::poll_internal (34,518,415 samples, 37.15%)</title><rect x="7.8707%" y="421" width="37.1539%" height="15" fill="rgb(213,79,30)" fg:x="7312444" fg:w="34518415"/><text x="8.1207%" y="431.50">crossterm::event::poll_internal</text></g><g><title>crossterm::event::read::InternalEventReader::poll (34,518,415 samples, 37.15%)</title><rect x="7.8707%" y="405" width="37.1539%" height="15" fill="rgb(246,177,23)" fg:x="7312444" fg:w="34518415"/><text x="8.1207%" y="415.50">crossterm::event::read::InternalEventReader::poll</text></g><g><title>crossterm::event::timeout::PollTimeout::elapsed (14,489,034 samples, 15.60%)</title><rect x="29.4294%" y="389" width="15.5953%" height="15" fill="rgb(230,62,27)" fg:x="27341825" fg:w="14489034"/><text x="29.6794%" y="399.50">crossterm::event::timeou..</text></g><g><title>core::option::Option&lt;T&gt;::map (14,489,034 samples, 15.60%)</title><rect x="29.4294%" y="373" width="15.5953%" height="15" fill="rgb(216,154,8)" fg:x="27341825" fg:w="14489034"/><text x="29.6794%" y="383.50">core::option::Option&lt;T&gt;:..</text></g><g><title>crossterm::event::timeout::PollTimeout::elapsed::_{{closure}} (14,489,034 samples, 15.60%)</title><rect x="29.4294%" y="357" width="15.5953%" height="15" fill="rgb(244,35,45)" fg:x="27341825" fg:w="14489034"/><text x="29.6794%" y="367.50">crossterm::event::timeou..</text></g><g><title>std::time::Instant::elapsed (14,489,034 samples, 15.60%)</title><rect x="29.4294%" y="341" width="15.5953%" height="15" fill="rgb(251,115,12)" fg:x="27341825" fg:w="14489034"/><text x="29.6794%" y="351.50">std::time::Instant::elap..</text></g><g><title>std::time::Instant::now (14,489,034 samples, 15.60%)</title><rect x="29.4294%" y="325" width="15.5953%" height="15" fill="rgb(240,54,50)" fg:x="27341825" fg:w="14489034"/><text x="29.6794%" y="335.50">std::time::Instant::now</text></g><g><title>std::sys::pal::unix::time::Instant::now (14,489,034 samples, 15.60%)</title><rect x="29.4294%" y="309" width="15.5953%" height="15" fill="rgb(233,84,52)" fg:x="27341825" fg:w="14489034"/><text x="29.6794%" y="319.50">std::sys::pal::unix::tim..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (14,489,034 samples, 15.60%)</title><rect x="29.4294%" y="293" width="15.5953%" height="15" fill="rgb(207,117,47)" fg:x="27341825" fg:w="14489034"/><text x="29.6794%" y="303.50">std::sys::pal::unix::tim..</text></g><g><title>clock_gettime (7,930,289 samples, 8.54%)</title><rect x="36.4889%" y="277" width="8.5358%" height="15" fill="rgb(249,43,39)" fg:x="33900570" fg:w="7930289"/><text x="36.7389%" y="287.50">clock_gettime</text></g><g><title>__vdso_clock_gettime (890,541 samples, 0.96%)</title><rect x="44.0661%" y="261" width="0.9585%" height="15" fill="rgb(209,38,44)" fg:x="40940318" fg:w="890541"/><text x="44.3161%" y="271.50"></text></g><g><title>rnbook::state::State::init (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="453" width="8.0516%" height="15" fill="rgb(236,212,23)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="463.50">rnbook::sta..</text></g><g><title>rnbook::term::DoubleBuffer::clear (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="437" width="8.0516%" height="15" fill="rgb(242,79,21)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="447.50">rnbook::ter..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="421" width="8.0516%" height="15" fill="rgb(211,96,35)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="431.50">std::collec..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="405" width="8.0516%" height="15" fill="rgb(253,215,40)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="415.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="389" width="8.0516%" height="15" fill="rgb(211,81,21)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="399.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="373" width="8.0516%" height="15" fill="rgb(208,190,38)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="383.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="357" width="8.0516%" height="15" fill="rgb(235,213,38)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="367.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="341" width="8.0516%" height="15" fill="rgb(237,122,38)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="351.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="325" width="8.0516%" height="15" fill="rgb(244,218,35)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="335.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="309" width="8.0516%" height="15" fill="rgb(240,68,47)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="319.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="293" width="8.0516%" height="15" fill="rgb(210,16,53)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="303.50">hashbrown::..</text></g><g><title>hashbrown::raw::sse2::Group::load (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="277" width="8.0516%" height="15" fill="rgb(235,124,12)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="287.50">hashbrown::..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="261" width="8.0516%" height="15" fill="rgb(224,169,11)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="271.50">core::core_..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7,480,441 samples, 8.05%)</title><rect x="45.0246%" y="245" width="8.0516%" height="15" fill="rgb(250,166,2)" fg:x="41830859" fg:w="7480441"/><text x="45.2746%" y="255.50">core::intri..</text></g><g><title>hashbrown::map::make_hash (505,102 samples, 0.54%)</title><rect x="53.0762%" y="357" width="0.5437%" height="15" fill="rgb(242,216,29)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (505,102 samples, 0.54%)</title><rect x="53.0762%" y="341" width="0.5437%" height="15" fill="rgb(230,116,27)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (505,102 samples, 0.54%)</title><rect x="53.0762%" y="325" width="0.5437%" height="15" fill="rgb(228,99,48)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (505,102 samples, 0.54%)</title><rect x="53.0762%" y="309" width="0.5437%" height="15" fill="rgb(253,11,6)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (505,102 samples, 0.54%)</title><rect x="53.0762%" y="293" width="0.5437%" height="15" fill="rgb(247,143,39)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (505,102 samples, 0.54%)</title><rect x="53.0762%" y="277" width="0.5437%" height="15" fill="rgb(236,97,10)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (505,102 samples, 0.54%)</title><rect x="53.0762%" y="261" width="0.5437%" height="15" fill="rgb(233,208,19)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (505,102 samples, 0.54%)</title><rect x="53.0762%" y="245" width="0.5437%" height="15" fill="rgb(216,164,2)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (505,102 samples, 0.54%)</title><rect x="53.0762%" y="229" width="0.5437%" height="15" fill="rgb(220,129,5)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (505,102 samples, 0.54%)</title><rect x="53.0762%" y="213" width="0.5437%" height="15" fill="rgb(242,17,10)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (505,102 samples, 0.54%)</title><rect x="53.0762%" y="197" width="0.5437%" height="15" fill="rgb(242,107,0)" fg:x="49311300" fg:w="505102"/><text x="53.3262%" y="207.50"></text></g><g><title>rnbook::term::&lt;impl rnbook::state::State&gt;::write_rectangle (1,515,306 samples, 1.63%)</title><rect x="53.0762%" y="437" width="1.6310%" height="15" fill="rgb(251,28,31)" fg:x="49311300" fg:w="1515306"/><text x="53.3262%" y="447.50"></text></g><g><title>rnbook::term::&lt;impl rnbook::state::State&gt;::write_line_horizontal (1,515,306 samples, 1.63%)</title><rect x="53.0762%" y="421" width="1.6310%" height="15" fill="rgb(233,223,10)" fg:x="49311300" fg:w="1515306"/><text x="53.3262%" y="431.50"></text></g><g><title>rnbook::term::DoubleBuffer::write (1,515,306 samples, 1.63%)</title><rect x="53.0762%" y="405" width="1.6310%" height="15" fill="rgb(215,21,27)" fg:x="49311300" fg:w="1515306"/><text x="53.3262%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,515,306 samples, 1.63%)</title><rect x="53.0762%" y="389" width="1.6310%" height="15" fill="rgb(232,23,21)" fg:x="49311300" fg:w="1515306"/><text x="53.3262%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,515,306 samples, 1.63%)</title><rect x="53.0762%" y="373" width="1.6310%" height="15" fill="rgb(244,5,23)" fg:x="49311300" fg:w="1515306"/><text x="53.3262%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,010,204 samples, 1.09%)</title><rect x="53.6199%" y="357" width="1.0873%" height="15" fill="rgb(226,81,46)" fg:x="49816402" fg:w="1010204"/><text x="53.8699%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,010,204 samples, 1.09%)</title><rect x="53.6199%" y="341" width="1.0873%" height="15" fill="rgb(247,70,30)" fg:x="49816402" fg:w="1010204"/><text x="53.8699%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,010,204 samples, 1.09%)</title><rect x="53.6199%" y="325" width="1.0873%" height="15" fill="rgb(212,68,19)" fg:x="49816402" fg:w="1010204"/><text x="53.8699%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,010,204 samples, 1.09%)</title><rect x="53.6199%" y="309" width="1.0873%" height="15" fill="rgb(240,187,13)" fg:x="49816402" fg:w="1010204"/><text x="53.8699%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,010,204 samples, 1.09%)</title><rect x="53.6199%" y="293" width="1.0873%" height="15" fill="rgb(223,113,26)" fg:x="49816402" fg:w="1010204"/><text x="53.8699%" y="303.50"></text></g><g><title>rnbook::state::State::event_loop (66,734,747 samples, 71.83%)</title><rect x="7.8707%" y="469" width="71.8299%" height="15" fill="rgb(206,192,2)" fg:x="7312444" fg:w="66734747"/><text x="8.1207%" y="479.50">rnbook::state::State::event_loop</text></g><g><title>rnbook::state::State::render (24,735,891 samples, 26.62%)</title><rect x="53.0762%" y="453" width="26.6245%" height="15" fill="rgb(241,108,4)" fg:x="49311300" fg:w="24735891"/><text x="53.3262%" y="463.50">rnbook::state::State::render</text></g><g><title>rnbook::term::DoubleBuffer::flush (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="437" width="24.9935%" height="15" fill="rgb(247,173,49)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="447.50">rnbook::term::DoubleBuffer::flush</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="421" width="24.9935%" height="15" fill="rgb(224,114,35)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="431.50">std::collections::hash::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="405" width="24.9935%" height="15" fill="rgb(245,159,27)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="415.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="389" width="24.9935%" height="15" fill="rgb(245,172,44)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="399.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_in..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="373" width="24.9935%" height="15" fill="rgb(236,23,11)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="383.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="357" width="24.9935%" height="15" fill="rgb(205,117,38)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="367.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="341" width="24.9935%" height="15" fill="rgb(237,72,25)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="351.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="325" width="24.9935%" height="15" fill="rgb(244,70,9)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="335.50">hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="309" width="24.9935%" height="15" fill="rgb(217,125,39)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="319.50">hashbrown::map::equivalent_key::_{{closu..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="293" width="24.9935%" height="15" fill="rgb(235,36,10)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="303.50">&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equival..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="277" width="24.9935%" height="15" fill="rgb(251,123,47)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="287.50">core::cmp::impls::&lt;impl core::cmp::Parti..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="261" width="24.9935%" height="15" fill="rgb(221,13,13)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="271.50">core::tuple::&lt;impl core::cmp::PartialEq ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (23,220,585 samples, 24.99%)</title><rect x="54.7072%" y="245" width="24.9935%" height="15" fill="rgb(238,131,9)" fg:x="50826606" fg:w="23220585"/><text x="54.9572%" y="255.50">core::cmp::impls::&lt;impl core::cmp::Parti..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="453" width="8.7453%" height="15" fill="rgb(211,50,8)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="463.50">core::result..</text></g><g><title>rnbook::term::DoubleBuffer::flush::_{{closure}} (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="437" width="8.7453%" height="15" fill="rgb(245,182,24)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="447.50">rnbook::term..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="421" width="8.7453%" height="15" fill="rgb(242,14,37)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="431.50">&lt;std::io::st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="405" width="8.7453%" height="15" fill="rgb(246,228,12)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="415.50">&lt;&amp;std::io::s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="389" width="8.7453%" height="15" fill="rgb(213,55,15)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="399.50">&lt;std::io::st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="373" width="8.7453%" height="15" fill="rgb(209,9,3)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="383.50">&lt;std::io::bu..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="357" width="8.7453%" height="15" fill="rgb(230,59,30)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="367.50">&lt;std::io::bu..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="341" width="8.7453%" height="15" fill="rgb(209,121,21)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="351.50">std::io::buf..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="325" width="8.7453%" height="15" fill="rgb(220,109,13)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="335.50">&lt;std::io::st..</text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="309" width="8.7453%" height="15" fill="rgb(232,18,1)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="319.50">&lt;std::sys::p..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="293" width="8.7453%" height="15" fill="rgb(215,41,42)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="303.50">std::sys::pa..</text></g><g><title>write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="277" width="8.7453%" height="15" fill="rgb(224,123,36)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="287.50">write</text></g><g><title>entry_SYSCALL_64_after_hwframe (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="261" width="8.7453%" height="15" fill="rgb(240,125,3)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="271.50">entry_SYSCAL..</text></g><g><title>do_syscall_64 (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="245" width="8.7453%" height="15" fill="rgb(205,98,50)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="255.50">do_syscall_64</text></g><g><title>ksys_write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="229" width="8.7453%" height="15" fill="rgb(205,185,37)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="239.50">ksys_write</text></g><g><title>vfs_write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="213" width="8.7453%" height="15" fill="rgb(238,207,15)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="223.50">vfs_write</text></g><g><title>file_tty_write.isra.0 (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="197" width="8.7453%" height="15" fill="rgb(213,199,42)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="207.50">file_tty_wri..</text></g><g><title>n_tty_write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="181" width="8.7453%" height="15" fill="rgb(235,201,11)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="191.50">n_tty_write</text></g><g><title>pty_write (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="165" width="8.7453%" height="15" fill="rgb(207,46,11)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="175.50">pty_write</text></g><g><title>tty_insert_flip_string_and_push_buffer (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="149" width="8.7453%" height="15" fill="rgb(241,35,35)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="159.50">tty_insert_f..</text></g><g><title>queue_work_on (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="133" width="8.7453%" height="15" fill="rgb(243,32,47)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="143.50">queue_work_on</text></g><g><title>__queue_work.part.0 (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="117" width="8.7453%" height="15" fill="rgb(247,202,23)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="127.50">__queue_work..</text></g><g><title>kick_pool (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="101" width="8.7453%" height="15" fill="rgb(219,102,11)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="111.50">kick_pool</text></g><g><title>try_to_wake_up (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="85" width="8.7453%" height="15" fill="rgb(243,110,44)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="95.50">try_to_wake_..</text></g><g><title>__task_rq_lock (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="69" width="8.7453%" height="15" fill="rgb(222,74,54)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="79.50">__task_rq_lo..</text></g><g><title>_raw_spin_lock (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="53" width="8.7453%" height="15" fill="rgb(216,99,12)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="63.50">_raw_spin_lo..</text></g><g><title>native_queued_spin_lock_slowpath (8,124,986 samples, 8.75%)</title><rect x="79.7007%" y="37" width="8.7453%" height="15" fill="rgb(226,22,26)" fg:x="74047191" fg:w="8124986"/><text x="79.9507%" y="47.50">native_queue..</text></g><g><title>_start (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="741" width="91.0553%" height="15" fill="rgb(217,163,10)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="751.50">_start</text></g><g><title>__libc_start_main (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="725" width="91.0553%" height="15" fill="rgb(213,25,53)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="735.50">__libc_start_main</text></g><g><title>[libc.so.6] (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="709" width="91.0553%" height="15" fill="rgb(252,105,26)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="719.50">[libc.so.6]</text></g><g><title>main (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="693" width="91.0553%" height="15" fill="rgb(220,39,43)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="677" width="91.0553%" height="15" fill="rgb(229,68,48)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="661" width="91.0553%" height="15" fill="rgb(252,8,32)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="645" width="91.0553%" height="15" fill="rgb(223,20,43)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="629" width="91.0553%" height="15" fill="rgb(229,81,49)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="613" width="91.0553%" height="15" fill="rgb(236,28,36)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="623.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="597" width="91.0553%" height="15" fill="rgb(249,185,26)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="581" width="91.0553%" height="15" fill="rgb(249,174,33)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="565" width="91.0553%" height="15" fill="rgb(233,201,37)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="549" width="91.0553%" height="15" fill="rgb(221,78,26)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="533" width="91.0553%" height="15" fill="rgb(250,127,30)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="543.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="517" width="91.0553%" height="15" fill="rgb(230,49,44)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="527.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="501" width="91.0553%" height="15" fill="rgb(229,67,23)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>rnbook::main (84,596,363 samples, 91.06%)</title><rect x="7.8707%" y="485" width="91.0553%" height="15" fill="rgb(249,83,47)" fg:x="7312444" fg:w="84596363"/><text x="8.1207%" y="495.50">rnbook::main</text></g><g><title>rnbook::term::DoubleBuffer::flush (17,861,616 samples, 19.23%)</title><rect x="79.7007%" y="469" width="19.2253%" height="15" fill="rgb(215,43,3)" fg:x="74047191" fg:w="17861616"/><text x="79.9507%" y="479.50">rnbook::term::DoubleBuffer::fl..</text></g><g><title>std::io::stdio::_print (9,736,630 samples, 10.48%)</title><rect x="88.4460%" y="453" width="10.4800%" height="15" fill="rgb(238,154,13)" fg:x="82172177" fg:w="9736630"/><text x="88.6960%" y="463.50">std::io::stdio:..</text></g><g><title>std::io::stdio::print_to (9,736,630 samples, 10.48%)</title><rect x="88.4460%" y="437" width="10.4800%" height="15" fill="rgb(219,56,2)" fg:x="82172177" fg:w="9736630"/><text x="88.6960%" y="447.50">std::io::stdio:..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9,736,630 samples, 10.48%)</title><rect x="88.4460%" y="421" width="10.4800%" height="15" fill="rgb(233,0,4)" fg:x="82172177" fg:w="9736630"/><text x="88.6960%" y="431.50">&lt;std::io::stdio..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (9,736,630 samples, 10.48%)</title><rect x="88.4460%" y="405" width="10.4800%" height="15" fill="rgb(235,30,7)" fg:x="82172177" fg:w="9736630"/><text x="88.6960%" y="415.50">&lt;&amp;std::io::stdi..</text></g><g><title>std::io::Write::write_fmt (9,736,630 samples, 10.48%)</title><rect x="88.4460%" y="389" width="10.4800%" height="15" fill="rgb(250,79,13)" fg:x="82172177" fg:w="9736630"/><text x="88.6960%" y="399.50">std::io::Write:..</text></g><g><title>core::fmt::write (9,736,630 samples, 10.48%)</title><rect x="88.4460%" y="373" width="10.4800%" height="15" fill="rgb(211,146,34)" fg:x="82172177" fg:w="9736630"/><text x="88.6960%" y="383.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (9,736,630 samples, 10.48%)</title><rect x="88.4460%" y="357" width="10.4800%" height="15" fill="rgb(228,22,38)" fg:x="82172177" fg:w="9736630"/><text x="88.6960%" y="367.50">core::fmt::rt::..</text></g><g><title>entry_SYSCALL_64_after_hwframe (439,109 samples, 0.47%)</title><rect x="98.9260%" y="741" width="0.4726%" height="15" fill="rgb(235,168,5)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="751.50"></text></g><g><title>do_syscall_64 (439,109 samples, 0.47%)</title><rect x="98.9260%" y="725" width="0.4726%" height="15" fill="rgb(221,155,16)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="735.50"></text></g><g><title>__x64_sys_execve (439,109 samples, 0.47%)</title><rect x="98.9260%" y="709" width="0.4726%" height="15" fill="rgb(215,215,53)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="719.50"></text></g><g><title>do_execveat_common.isra.0 (439,109 samples, 0.47%)</title><rect x="98.9260%" y="693" width="0.4726%" height="15" fill="rgb(223,4,10)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="703.50"></text></g><g><title>bprm_execve (439,109 samples, 0.47%)</title><rect x="98.9260%" y="677" width="0.4726%" height="15" fill="rgb(234,103,6)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="687.50"></text></g><g><title>load_elf_binary (439,109 samples, 0.47%)</title><rect x="98.9260%" y="661" width="0.4726%" height="15" fill="rgb(227,97,0)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="671.50"></text></g><g><title>setup_new_exec (439,109 samples, 0.47%)</title><rect x="98.9260%" y="645" width="0.4726%" height="15" fill="rgb(234,150,53)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="655.50"></text></g><g><title>arch_setup_new_exec (439,109 samples, 0.47%)</title><rect x="98.9260%" y="629" width="0.4726%" height="15" fill="rgb(228,201,54)" fg:x="91908807" fg:w="439109"/><text x="99.1760%" y="639.50"></text></g><g><title>all (92,906,620 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="92906620"/><text x="0.2500%" y="783.50"></text></g><g><title>rnbook (92,893,833 samples, 99.99%)</title><rect x="0.0138%" y="757" width="99.9862%" height="15" fill="rgb(237,53,32)" fg:x="12787" fg:w="92893833"/><text x="0.2638%" y="767.50">rnbook</text></g><g><title>epoll_wait (558,704 samples, 0.60%)</title><rect x="99.3986%" y="741" width="0.6014%" height="15" fill="rgb(233,25,53)" fg:x="92347916" fg:w="558704"/><text x="99.6486%" y="751.50"></text></g></svg></svg>